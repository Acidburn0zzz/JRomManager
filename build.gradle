apply plugin: "java"

dependencies {
	implementation project(':JUpdater')
	implementation project(':JRomManager')
	implementation project(':Jtrrntzip')
}

evaluationDependsOn(project(':JUpdater').path)
evaluationDependsOn(project(':JRomManager').path)

task installProperties {
   def props = new Properties()
   props.setProperty('name','optyfr')
   props.setProperty('project','JRomManager')
   props.setProperty('archive',project(':JRomManager').distZip.archivePath.getName())
   def install_dir = file("$buildDir/tmp");
   install_dir.mkdirs();
   def writer = new FileWriter(new File(install_dir,'install.properties'))
   try {
      props.store(writer,null)
      writer.flush()
   } finally {
      writer.close()
   }
}
task oneJar( type: Jar , dependsOn: [':JUpdater:assemble', installProperties]) {
    baseName = 'JRomManager-install-'+project(':JRomManager').version
    from project(':JUpdater').sourceSets.main.output.classesDirs
	from project(':JUpdater').configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	from project(':JRomManager').distZip
	from file("$buildDir/tmp/install.properties")
	manifest {
		attributes(
			"Manifest-Version"     : "1.0",
			"Specification-Title"  : "JRomManager",
			"Specification-Version": project(':JRomManager').props.getProperty("Specification-Version"),
			"Implementation-Title" : "jrm",
			"Implementation-Version" : project(':JRomManager').props.getProperty("Implementation-Version"),
			"Main-Class"           : "jupdater.JUpdater",
		)
		archiveName baseName + '.' + extension
	}
	destinationDir = file("$buildDir/distributions/")
}

assemble.dependsOn oneJar
assemble.dependsOn ':Jtrrntzip:assemble'

