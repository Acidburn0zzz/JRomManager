plugins {
	id "de.undercouch.download" version "3.4.3"
	id "nebula.ospackage" version "4.9.3"
	id "de.inetsoftware.setupbuilder" version "4.8.5"
	id 'io.franzbecker.gradle-lombok' version '1.14'
//	id "edu.sc.seis.macAppBundle" version "2.3.0"
}


apply plugin: 'java'
apply plugin: 'eclipse'
eclipse {
    classpath {
		downloadJavadoc = true
		downloadSources = true
        file {
            whenMerged { classpath ->
                classpath.entries.removeAll { entry ->
                    if ( entry.kind == 'src' ) {
                        entry.includes = []
                        entry.excludes = []
                        entry.getEntryAttributes().clear()
                    }
                    if ( entry.hasProperty('output') ) {
                        entry.output = null // use the default
                    }
                    false
                }
            }
        }
    }
}


lombok {
	version = '1.18.6'
	sha256 = ""
}

ext.props = new Properties()
file("dist/ver.properties").withInputStream { props.load(it) }

version = props.getProperty("Specification-Version")+'.'+props.getProperty("Implementation-Version")

repositories {
	mavenCentral()
}

sourceSets {
	standalone {
		java {
			srcDirs = ["src-standalone"]
		}
	}
	server {
		java {
			srcDirs = ["src-server"]
		}
	}
	core {
		java {
			srcDirs = ["src"]
		}
		resources {
			srcDirs = ["src"]
		}
	}
	trrntzip {
		java {
			srcDirs = ["../Jtrrntzip/src"]
		}
		resources {
			srcDirs = ["../Jtrrntzip/src"]
		}
	}
	updater {
		java {
			srcDirs = ["../JUpdater/src"]
		}
	}
}

configurations {
	compile.extendsFrom trrntzipCompile
	compile.extendsFrom coreCompile
	compile.extendsFrom updaterCompile
	compile.extendsFrom standaloneCompile
	compile.extendsFrom serverCompile
	compileOnly.extendsFrom trrntzipCompileOnly
	compileOnly.extendsFrom coreCompileOnly
	compileOnly.extendsFrom standaloneCompileOnly
	compileOnly.extendsFrom serverCompileOnly
	runtime.extendsFrom coreRuntime
	runtime.extendsFrom serverRuntime
}
dependencies {

	trrntzipCompile group: 'commons-codec', name:'commons-codec', version:'1.12'
	trrntzipCompile group: 'commons-io', name: 'commons-io', version: '2.6'
	
	coreCompileOnly sourceSets.trrntzip.output
	coreCompile group: 'commons-codec', name:'commons-codec', version:'1.12'
	coreCompile group: 'commons-io', name: 'commons-io', version: '2.6'
	coreCompile group: 'org.apache.commons', name: 'commons-text', version: '1.6'
	coreCompile group: 'org.apache.commons', name: 'commons-compress', version: '1.18'
	coreCompile group: 'net.sf.sevenzipjbinding', name: 'sevenzipjbinding', version: '9.20-2.00beta'
	coreRuntime group: 'net.sf.sevenzipjbinding', name: 'sevenzipjbinding-all-platforms', version: '9.20-2.00beta'
	coreRuntime group: 'net.sf.sevenzipjbinding', name: 'sevenzipjbinding-linux-arm', version: '9.20-2.00beta'
	coreCompile group: 'one.util', name: 'streamex', version: '0.6.8'
	coreCompile group: 'com.sun.activation', name: 'javax.activation', version: '1.2.0'
	coreCompile group: 'com.eclipsesource.minimal-json', name: 'minimal-json', version: '0.9.5'
//	coreCompileOnly group: 'net.jcip', name: 'jcip-annotations', version: '1.0'
	coreCompileOnly group: 'com.github.spotbugs', name:'spotbugs-annotations', version: '3.1.7'
	coreCompileOnly group: 'org.projectlombok', name:'lombok', version:'1.18.6'

	updaterCompile group: 'com.eclipsesource.minimal-json', name: 'minimal-json', version: '0.9.5'
	updaterCompile group: 'com.atlassian.commonmark', name: 'commonmark', version: '0.12.1'

	standaloneCompileOnly sourceSets.core.output
	standaloneCompileOnly sourceSets.updater.output
	standaloneCompile group: 'commons-codec', name:'commons-codec', version:'1.12'
	standaloneCompile group: 'commons-cli', name: 'commons-cli', version: '1.4'
	standaloneCompile group: 'commons-io', name: 'commons-io', version: '2.6'
	standaloneCompile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
	standaloneCompile group: 'one.util', name: 'streamex', version: '0.6.8'
	standaloneCompile group: 'com.eclipsesource.minimal-json', name: 'minimal-json', version: '0.9.5'
	
	serverCompileOnly sourceSets.core.output
//	serverCompileOnly sourceSets.standalone.output
	serverCompileOnly group: 'org.projectlombok', name:'lombok', version:'1.18.6'
	serverCompile group: 'commons-cli', name: 'commons-cli', version: '1.4'
	serverCompile group: 'commons-io', name: 'commons-io', version: '2.6'
	serverCompile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
	serverCompile group: 'org.nanohttpd', name: 'nanohttpd-nanolets', version: '2.3.1'
	serverCompile group: 'org.nanohttpd', name: 'nanohttpd-websocket', version: '2.3.1'
	serverCompile group: 'org.eclipse.jetty', name:'jetty-server', version:'9.4.15.v20190215'
	serverCompile group: 'org.eclipse.jetty', name:'jetty-servlet', version:'9.4.15.v20190215'
	serverCompile group: 'org.eclipse.jetty.websocket', name:'javax-websocket-server-impl', version:'9.4.15.v20190215'
	serverCompile group: 'com.eclipsesource.minimal-json', name: 'minimal-json', version: '0.9.5'
	serverCompile group: 'one.util', name: 'streamex', version: '0.6.8'
	
//	implementation group: 'org.apache.commons', name: 'commons-text', version: '1.6'
}


compileCoreJava {
	dependsOn compileTrrntzipJava
}

compileStandaloneJava {
	dependsOn compileCoreJava
	dependsOn compileUpdaterJava
}

compileServerJava {
	dependsOn compileStandaloneJava
}

compileJava {
	dependsOn compileServerJava
}


javadoc {
	source += sourceSets.main.allJava
	classpath += sourceSets.main.compileClasspath
	options.showAll()
	options.with {
        links 'https://docs.oracle.com/javase/8/docs/api/'
    }
}

build.dependsOn javadoc


task sevenzip(type: Jar) {
	def sevenzip_dirs = [] as Set
	def paths = configurations.runtime.filter { it.name.startsWith('sevenzipjbinding-') && !it.name.startsWith('sevenzipjbinding-9') }
	paths.each( {
		zipTree(it).filter { it.name.endsWith('sevenzipjbinding-lib.properties') }.each { 
			sevenzip_dirs += java.nio.file.Paths.get(it.path).getParent().getFileName().toString()
		}
		from (zipTree(it)) {
			include '*/**'
			exclude '*.properties'
	  	}
	})
	def props = new Properties()
	sevenzip_dirs.eachWithIndex{ item, idx -> props.setProperty('platform.'+(idx+1), item) }
	def propertyFile = file "$buildDir/sevenzipjbinding-platforms.properties"
	propertyFile.withWriter { props.store(it, null) }
	from(propertyFile)
	archiveName 'sevenzipjbinding-all.' + extension
}

jar {
	from sourceSets.trrntzip.output
	from sourceSets.core.output
	from sourceSets.updater.output
	from sourceSets.standalone.output
	from sourceSets.server.output
	manifest {
		def path = configurations.compile.filter { it.name.endsWith('.jar') && (!it.name.startsWith('sevenzip') || it.name.startsWith('sevenzipjbinding-9')) }.collect { 'lib/' + it.getName() }.join(' ') + ' lib/sevenzipjbinding-all.jar'
		attributes(
			"Manifest-Version"     : "1.0",
			"Specification-Title"  : "JRomManager",
			"Specification-Version": props.getProperty("Specification-Version"),
			"Implementation-Title" : "jrm",
			"Implementation-Version" : props.getProperty("Implementation-Version"),
			"Main-Class"           : "jrm.JRomManager",
			"Class-Path"           : path
		)
		archiveName baseName + '.' + extension
	}
}

task docZip(type: Zip, dependsOn: javadoc) {
	destinationDir buildDir
	classifier "javadocs"
	from javadoc.outputs.files
	into "docs"
	archiveName baseName + '-' + version + '-apidocs' + '.' + extension
	destinationDir = file("$buildDir/distributions/")
}

task downloadWrapper(type: Download) {
	src 'https://download.tanukisoftware.com/wrapper/3.5.37/wrapper-delta-pack-3.5.37.zip'
	dest file("$buildDir/wrapper.zip")
	onlyIfModified true
}

task distZip(type: Zip, dependsOn: [jar, sevenzip, ':WebClient:build',downloadWrapper]) {
	from (configurations.runtimeClasspath) {
		into('lib')
		exclude '*.zip'
		include '*.jar'
		exclude 'sevenzipjbinding*.jar'
	}
	from (configurations.runtimeClasspath) {
		into('lib')
		include 'sevenzipjbinding-9*.jar'
	}
	from (sevenzip) {
		into('lib')
	}
	from (jar)
	from (project(':JUpdater').jar)
	from (new File(project(':WebClient').buildDir,"/gwt/out/smartgwt")) {
		into('webclient')
	}
	from (zipTree(file("$buildDir/wrapper.zip"))) {
		exclude '*/bin/*.bat'
		exclude '*/*/*test*'
		exclude '*/*/*demo*'
		exclude '*/src/**'
		exclude '*/conf/*'
		eachFile { fcp ->
			fcp.path = fcp.path.replaceFirst("^wrapper-delta-pack-[0-9a-z\\.]*", 'wrapper')
			if(fcp.path.endsWith(".sh") || fcp.name.startsWith("wrapper")) {
				fcp.mode = 0755
			}
		}
		includeEmptyDirs false
  	}
	from ('dist/wrapper') {
		include '*.bat'
		include '*.sh'
		include '*.shconf'
		into 'wrapper/bin'
		fileMode = 0755
	}
	from ('dist/wrapper') {
		include 'wrapper.conf'
		into 'wrapper/conf'
	}
	from ('dist/wrapper') {
		include 'wrapper.dll'
		into 'wrapper/lib'
	}
	from ('dist/logs') {
		include '.do_not_delete'
		into 'logs'
		dirMode = 0777
	}
	from ('dist') {
		include '*.bat'
		include '*.sh'
		fileMode = 0755
	}
	archiveName baseName + '-' + version + '.' + extension
	destinationDir = file("$buildDir/distributions/")
}

build.dependsOn distZip
build.dependsOn docZip

apply plugin: 'nebula.ospackage'

ospackage {
	packageName 'jrommanager'
	packageDescription 'A Mame and Retrogaming Rom Manager, Java alternative to ClrMamePro'
	release '1'
	type= BINARY
	license 'GPL-3'
	vendor 'optyfr'
	packager 'optyfr'
	maintainer 'optyfr'
	user 'root'
	permissionGroup 'root'
	into '/opt/jrommanager'
	url 'https://github.com/optyfr/JRomManager'
	from (configurations.runtimeClasspath) {
		into('lib')
		exclude '*.zip'
		include '*.jar'
		exclude 'sevenzipjbinding*.jar'
	}
	from (configurations.runtimeClasspath) {
		into('lib')
		include 'sevenzipjbinding-9*.jar'
	}
	from (sevenzip) {
		into('lib')
	}
	from (jar)
	from (project(':JUpdater').jar)
	from (zipTree(distZip.archivePath)) {
		include 'wrapper/**'
		include 'webclient/**'
  	}
	from ('dist') {
		include '*.bat'
		include '*.sh'
		include '*.shconf'
		fileMode = 0755
	}
	from ('dist') {
		include name+'.desktop'
		into '/usr/share/applications'
	}
	from ('dist') {
		include name+'.png'
		into '/usr/share/pixmaps'
	}
	link('/usr/bin/jrommanager', '/opt/jrommanager/JRomManager-multi.sh')
}

buildDeb {
	requires('java8-runtime').or('java9-runtime').or('java10-runtime').or('java11-runtime')
	arch = "all"
}

buildRpm {
	requires('java', '1:1.8.0', EQUAL).or('java', '1:9', EQUAL).or('java', '1:10', EQUAL).or('java', '1:11', EQUAL)
	arch = NOARCH
	os = LINUX
	addParentDirs = false
	createDirectoryEntry = false
}

build.dependsOn buildRpm
build.dependsOn buildDeb

apply plugin: "de.inetsoftware.setupbuilder"
		
setupBuilder {
    vendor = 'optyfr'
    application = project.name
    appIdentifier = project.name
    version = props.getProperty("Specification-Version")+'.'+props.getProperty("Implementation-Version");
    licenseFile = new File(project(':JLauncher').projectDir,'LICENSE')
    icons = new File(new File(project.projectDir,'dist'),project.name+'.png')
	from (configurations.runtimeClasspath) {
		into('lib')
		exclude '*.zip'
		include '*.jar'
		exclude 'sevenzipjbinding*.jar'
	}
	from (configurations.runtimeClasspath) {
		into('lib')
		include 'sevenzipjbinding-9*.jar'
	}
	from (sevenzip) {
		into('lib')
	}
	from (jar)
	from (project(':JUpdater').jar)
	from (zipTree(distZip.archivePath)) {
		include 'wrapper/**'
		include 'webclient/**'
  	}
	desktopStarter {
		displayName = project.name
		executable = project.name + '.exe'
	}
	mainJar = 'JRomManager.jar'
	mainClass = 'jrm.JRomManagerMulti'
//	setup.bundleJre = 1.8
}

import org.apache.tools.ant.taskdefs.condition.Os
if (Os.isFamily(Os.FAMILY_WINDOWS))
{
	def result = exec{
		executable =  "where"
		args = ["candle.exe"]
		ignoreExitValue = true
		standardOutput = new ByteArrayOutputStream()
		errorOutput = new ByteArrayOutputStream()
	}
	
	if(result.getExitValue()==0)
	{
		
		task buildMSI(type: com.inet.gradle.setup.msi.Msi, dependsOn: ':JLauncher:build') {
			arch = 'x86'
			languages = ['en_us'] 
			from (new File(project(':JLauncher').buildDir , 'exe/JLauncher'))
			{
				include 'JLauncher.exe'
				rename { project.name+'.exe' }
			}
			onlyIf {
		    	Os.isFamily(Os.FAMILY_WINDOWS)
		    }
		}
		
		build.dependsOn buildMSI
	}
	else
		logger.warn("Can't find WIX ToolSet binaries in PATH, Skipping MSI build.")
}
else
	logger.info('Not on Windows, skipping MSI build.')

if (Os.isFamily(Os.FAMILY_MAC))
{
	task buildDMG(type: com.inet.gradle.setup.dmg.Dmg, dependsOn: distZip) {
		onlyIf {
			Os.isFamily(Os.FAMILY_MAC)
		}
	}
		
	build.dependsOn buildDMG

/*	apply plugin: "edu.sc.seis.macAppBundle"

	macAppBundle {
		mainClassName = "jrm.JRomManager"
	}

	build.dependsOn createDmg*/
}
else
	logger.info('Not on Mac, skipping DMG build.')
