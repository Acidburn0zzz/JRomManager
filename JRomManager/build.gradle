plugins {
  id "nebula.ospackage" version "4.9.3"
  id "de.inetsoftware.setupbuilder" version "4.8.5"
}


apply plugin: 'java'
apply plugin: 'eclipse'

ext.props = new Properties()
file("dist/ver.properties").withInputStream { props.load(it) }

version = props.getProperty("Specification-Version")+props.getProperty("Implementation-Version")

repositories {
	mavenCentral()
}

eclipse {
	classpath {
		downloadJavadoc = true
		downloadSources = true
	}
}

dependencies {
	compile group: 'commons-codec', name: 'commons-codec', version: '1.11'
	compile group: 'commons-io', name: 'commons-io', version: '2.6'
	compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
	compile group: 'org.apache.commons', name: 'commons-text', version: '1.6'
	compile group: 'org.apache.commons', name: 'commons-compress', version: '1.18'
	compile group: 'one.util', name: 'streamex', version: '0.6.7'
	compile group: 'net.sf.sevenzipjbinding', name: 'sevenzipjbinding', version: '9.20-2.00beta'
	compile group: 'net.sf.sevenzipjbinding', name: 'sevenzipjbinding-all-platforms', version: '9.20-2.00beta'
	compile group: 'com.eclipsesource.minimal-json', name: 'minimal-json', version: '0.9.5'
	compile group: 'com.atlassian.commonmark', name: 'commonmark', version: '0.12.1'
	compile group: 'org.nanohttpd', name: 'nanohttpd-nanolets', version: '2.3.1'
	compile group: 'org.nanohttpd', name: 'nanohttpd-websocket', version: '2.3.1'
	compileOnly 'net.jcip:jcip-annotations:1.0'
	compileOnly 'com.github.spotbugs:spotbugs-annotations:3.1.7'
}

sourceSets {
	main {
		java {
			srcDirs = ["src","../Jtrrntzip/src","../JUpdater/src"]
		}
		resources {
			srcDirs = ["src","../Jtrrntzip/src"]
		}
	}
}

javadoc {
	source += sourceSets.main.allJava
	classpath += sourceSets.main.compileClasspath
	options.showAll()
	options.with {
        links 'https://docs.oracle.com/javase/8/docs/api/'
    }
}

build.dependsOn javadoc

jar {
	manifest {
		attributes(
			"Manifest-Version"     : "1.0",
			"Specification-Title"  : "JRomManager",
			"Specification-Version": props.getProperty("Specification-Version"),
			"Implementation-Title" : "jrm",
			"Implementation-Version" : props.getProperty("Implementation-Version"),
			"Main-Class"           : "jrm.JRomManager",
			"Class-Path"           : configurations.compile.collect { 'lib/' + it.getName() }.join(' ')
		)
		archiveName baseName + '.' + extension
	}
}

task docZip(type: Zip, dependsOn: javadoc) {
	destinationDir buildDir
	classifier "javadocs"
	from javadoc.outputs.files
	into "docs"
	archiveName baseName + '-' + version + '-apidocs' + '.' + extension
	destinationDir = file("$buildDir/distributions/")
}

task distZip(type: Zip, dependsOn: jar) {
	from (configurations.compile) {
		into('lib')
	}
	from (jar)
	from (project(':JUpdater').jar)
	from (new File(project(':WebClient').buildDir,"/gwt/out/smartgwt")) {
		into('webclient')
	}
	from ('dist') {
		include '*.bat'
		include '*.sh'
		fileMode = 0755
	}
	archiveName baseName + '-' + version + '.' + extension
	destinationDir = file("$buildDir/distributions/")
}

build.dependsOn distZip
build.dependsOn docZip

apply plugin: 'nebula.ospackage'

ospackage {
	packageName 'jrommanager'
	packageDescription 'A Mame and Retrogaming Rom Manager, Java alternative to ClrMamePro'
	release '1'
	type= BINARY
	license 'GPL-3'
	vendor 'optyfr'
	packager 'optyfr'
	maintainer 'optyfr'
	user 'root'
	permissionGroup 'root'
	into '/opt/jrommanager'
	url 'https://github.com/optyfr/JRomManager'
	from (configurations.compile) {
		into('lib')
	}
	from (jar)
	from (project(':JUpdater').jar)
	from (new File(project(':WebClient').buildDir,"/gwt/out/smartgwt")) {
		into('webclient')
	}
	from ('dist') {
		include '*.bat'
		include '*.sh'
		fileMode = 0755
	}
	from ('dist') {
		include name+'.desktop'
		into '/usr/share/applications'
	}
	from ('dist') {
		include name+'.png'
		into '/usr/share/pixmaps'
	}
	link('/usr/bin/jrommanager', '/opt/jrommanager/JRomManager-multi.sh')
}

buildDeb {
	requires('java8-runtime').or('java9-runtime').or('java10-runtime')
	arch = "all"
}

buildRpm {
	requires('java', '1:1.8.0', EQUAL).or('java', '1:9', EQUAL).or('java', '1:10', EQUAL)
	arch = NOARCH
	os = LINUX
	addParentDirs = false
	createDirectoryEntry = false
}

build.dependsOn buildRpm
build.dependsOn buildDeb

def os = System.getProperty("os.name").toLowerCase()
if (os.contains("windows"))
{
	def result = exec{
		executable =  "where"
		args = ["candle.exe"]
		ignoreExitValue = true
		standardOutput = new ByteArrayOutputStream()
		errorOutput = new ByteArrayOutputStream()
	}
	
	if(result.getExitValue()==0)
	{
		apply plugin: "de.inetsoftware.setupbuilder"
		
		setupBuilder {
		    vendor = 'optyfr'
		    application = project.name
		    appIdentifier = project.name
		    version = props.getProperty("Specification-Version")+'.'+props.getProperty("Implementation-Version").substring(1);
		    licenseFile = new File(project(':JLauncher').projectDir,'LICENSE')
		    icons = new File(new File(project.projectDir,'dist'),project.name+'.png')
			from (configurations.compile) {
				into('lib')
			}
			from (jar)
			from (project(':JUpdater').jar)
			from (new File(project(':WebClient').buildDir,"/gwt/out/smartgwt")) {
				into('webclient')
			}
			desktopStarter {
				displayName = project.name
				executable = project.name + '.exe'
			}
//			setup.bundleJre = 1.8
		}
		
		task buildMSI(type: com.inet.gradle.setup.msi.Msi, dependsOn: ':JLauncher:build') {
			arch = 'x86'
			languages = ['en_us'] 
			from (new File(project(':JLauncher').buildDir , 'exe/JLauncher'))
			{
				include 'JLauncher.exe'
				rename { project.name+'.exe' }
			}
		}
		
		build.dependsOn buildMSI
	}
	else
		logger.warn("Can't find WIX ToolSet binaries in PATH, Skipping MSI build.")
}
else
	logger.info('Not on Windows, skipping MSI build.')
