plugins {
  id "nebula.ospackage" version "4.9.3"
}

apply plugin: 'java'
apply plugin: 'eclipse'

ext.props = new Properties()
file("dist/ver.properties").withInputStream { props.load(it) }

version = props.getProperty("Specification-Version")+props.getProperty("Implementation-Version")

repositories {
	mavenCentral()
}

eclipse {
	classpath {
		downloadJavadoc = true
		downloadSources = true
	}
}

dependencies {
	compile group: 'commons-codec', name: 'commons-codec', version: '1.11'
	compile group: 'commons-io', name: 'commons-io', version: '2.6'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
	compile group: 'org.apache.commons', name: 'commons-text', version: '1.3'
	compile group: 'org.apache.commons', name: 'commons-compress', version: '1.16.1'
	compile group: 'one.util', name: 'streamex', version: '0.6.7'
	compile group: 'net.sf.sevenzipjbinding', name: 'sevenzipjbinding', version: '9.20-2.00beta'
	compile group: 'net.sf.sevenzipjbinding', name: 'sevenzipjbinding-all-platforms', version: '9.20-2.00beta'
	compile group: 'com.eclipsesource.minimal-json', name: 'minimal-json', version: '0.9.5'
	compile group: 'com.atlassian.commonmark', name: 'commonmark', version: '0.11.0'
}

sourceSets {
	main {
		java {
			srcDirs = ["src","../Jtrrntzip/src","../JUpdater/src"]
		}
		resources {
			srcDirs = ["src","../Jtrrntzip/src"]
		}
	}
}

jar {
	manifest {
		attributes(
			"Manifest-Version"     : "1.0",
		    "Specification-Title"  : "JRomManager",
		    "Specification-Version": props.getProperty("Specification-Version"),
        	"Implementation-Title" : "jrm",
            "Implementation-Version" : props.getProperty("Implementation-Version"),
            "Main-Class"           : "JRomManager",
            "Class-Path"           : configurations.compile.collect { 'lib/' + it.getName() }.join(' ')
		)
		archiveName baseName + '.' + extension
	}
}

task distZip(type: Zip, dependsOn: jar) {
	from (configurations.compile) {
		into('lib')
	}
	from (jar)
	from (project(':JUpdater').jar)
	from ('dist') {
		include '*.bat'
		include '*.sh'
		fileMode = 0755
	}
	archiveName baseName + '-' + version + '.' + extension
	destinationDir = file("$buildDir/distributions/")
}

assemble.dependsOn distZip

apply plugin: 'nebula.ospackage'

ospackage {
	packageName 'jrommanager'
	packageDescription 'A Mame and Retrogaming Rom Manager, Java alternative to ClrMamePro'
	release '1'
	type= BINARY
	license 'GPL-3'
	vendor 'optyfr'
	packager 'optyfr'
	into '/opt/jrommanager'
	url 'https://github.com/optyfr/JRomManager'
	from (configurations.compile) {
		into('lib')
	}
	from (jar)
	from (project(':JUpdater').jar)
	from ('dist') {
		include '*.bat'
		include '*.sh'
		fileMode = 0755
	}
	link('/usr/bin/jrommanager', '/opt/jrommanager/JRomManager-multi.sh')
}

buildDeb {
	requires('java8-runtime')
	arch = "all"
}

buildRpm {
	requires('java', '1:1.8.0', GREATER | EQUAL)
	arch = NOARCH
	os = LINUX
}

assemble.dependsOn buildRpm
assemble.dependsOn buildDeb
